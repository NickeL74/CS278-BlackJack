Microsoft (R) Macro Assembler Version 14.10.25019.0	    12/10/17 14:38:04
Main.asm						     Page 1 - 1


				;BlackJack project
				;Nicholas Little and Steven Schierman

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
				;player hand values
 00000000  0000000E [		playerHand BYTE 14 DUP(?)
	    00
	   ]
 0000000E 00			cardsInPlayerHand BYTE 0
 0000000F 00000000		sumOfPlayerHand DWORD 0
 00000013 00			stayValue BYTE 0
 00000014 00			playerHighAce BYTE 0
 00000015 00000000		playerBust DWORD 0
 00000019 00000000		player21 DWORD 0
 0000001D 2D 2D 2D 2D 2D	playerHandIndicator BYTE "------Your Hand-----", 0ah, "sum:", 0h
	   2D 59 6F 75 72
	   20 48 61 6E 64
	   2D 2D 2D 2D 2D
	   0A 73 75 6D 3A
	   00

				;dealer hand values
 00000037  0000000E [		dealerHand BYTE 14 DUP(?), 1
	    00
	   ] 01
 00000046 00			cardsInDealerHand BYTE 0
 00000047 00000000		sumOfDealerHand DWORD 0
 0000004B 00			dealerHighAce BYTE 0
 0000004C 00000000		dealerBust DWORD 0
 00000050 00000000		dealer21 DWORD 0
 00000054 2D 2D 2D 2D 2D	dealerHandIndicator BYTE "------Dealer's Hand------", 0ah, 0h
	   2D 44 65 61 6C
	   65 72 27 73 20
	   48 61 6E 64 2D
	   2D 2D 2D 2D 2D
	   0A 00
 0000006F 73 75 6D 3A 00	sumText BYTE "sum:", 0h

				;End Conditions
 00000074 0A 59 4F 55 20	winMessage BYTE 0ah, "YOU WIN!!", 0ah, 0h
	   57 49 4E 21 21
	   0A 00
 00000080 0A 59 4F 55 20	loseMessage BYTE 0ah, "YOU LOST....", 0ah, "Better luck next time.", 0ah, 0h
	   4C 4F 53 54 2E
	   2E 2E 2E 0A 42
	   65 74 74 65 72
	   20 6C 75 63 6B
	   20 6E 65 78 74
	   20 74 69 6D 65
	   2E 0A 00
 000000A6 0A 54 48 45 52	tieMessage BYTE 0ah, "THERE IS A PUSH.", 0ah, 0h
	   45 20 49 53 20
	   41 20 50 55 53
	   48 2E 0A 00

				;User input values
 000000B9 57 6F 75 6C 64	whatToDo BYTE "Would you like to hit or stay?", 0ah, "Type 'hit' or 'stay' then press enter to submit.", 0ah, 0h
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 68 69
	   74 20 6F 72 20
	   73 74 61 79 3F
	   0A 54 79 70 65
	   20 27 68 69 74
	   27 20 6F 72 20
	   27 73 74 61 79
	   27 20 74 68 65
	   6E 20 70 72 65
	   73 73 20 65 6E
	   74 65 72 20 74
	   6F 20 73 75 62
	   6D 69 74 2E 0A
	   00
 0000010A  00000005 [		input BYTE 5 DUP(?)
	    00
	   ]
 0000010F 57 6F 75 6C 64	newGame BYTE "Would you like to play again?", 0ah, "Type 'yes' to continue or 'no' to end.", 0ah, 0h
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 70 6C
	   61 79 20 61 67
	   61 69 6E 3F 0A
	   54 79 70 65 20
	   27 79 65 73 27
	   20 74 6F 20 63
	   6F 6E 74 69 6E
	   75 65 20 6F 72
	   20 27 6E 6F 27
	   20 74 6F 20 65
	   6E 64 2E 0A 00



				;Cards displayed
 00000155 DA C4 C4 C4 C4	Back BYTE 0dah, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0bfh, 0ah,
	   C4 C4 C4 C4 C4
	   C4 BF 0A 7C 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 7C
	   0A 7C 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 7C 0A 7C
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   7C 0A 7C 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 7C 0A
	   7C 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 7C 0A C0 C4
	   C4 C4 C4 C4 C4
	   C4 C4 C4 C4 D9
	   0A 00
				"|..........|", 0ah,
				"|..........|", 0ah,
				"|..........|", 0ah,
				"|..........|", 0ah,
				"|..........|", 0ah,
				0c0h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0d9h, 0ah, 0h
 000001B1 DA C4 C4 C4 C4	Ace BYTE 0dah, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0bfh, 0ah,
	   C4 C4 C4 C4 C4
	   C4 BF 0A 7C 41
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 7C
	   0A 7C 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 7C 0A 7C
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   7C 0A 7C 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 7C 0A
	   7C 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   41 7C 0A C0 C4
	   C4 C4 C4 C4 C4
	   C4 C4 C4 C4 D9
	   0A 00
				"|A.........|", 0ah,
				"|..........|", 0ah,
				"|..........|", 0ah,
				"|..........|", 0ah,
				"|.........A|", 0ah,
				0c0h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0d9h, 0ah, 0h
 0000020D DA C4 C4 C4 C4	Two BYTE 0dah, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0bfh, 0ah,
	   C4 C4 C4 C4 C4
	   C4 BF 0A 7C 32
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 7C
	   0A 7C 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 7C 0A 7C
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   7C 0A 7C 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 7C 0A
	   7C 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   32 7C 0A C0 C4
	   C4 C4 C4 C4 C4
	   C4 C4 C4 C4 D9
	   0A 00
				"|2.........|", 0ah,
				"|..........|", 0ah,
				"|..........|", 0ah,
				"|..........|", 0ah,
				"|.........2|", 0ah,
				0c0h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0d9h, 0ah, 0h
 00000269 DA C4 C4 C4 C4	Three BYTE 0dah, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0bfh, 0ah,
	   C4 C4 C4 C4 C4
	   C4 BF 0A 7C 33
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 7C
	   0A 7C 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 7C 0A 7C
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   7C 0A 7C 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 7C 0A
	   7C 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   33 7C 0A C0 C4
	   C4 C4 C4 C4 C4
	   C4 C4 C4 C4 D9
	   0A 00
				"|3.........|", 0ah,
				"|..........|", 0ah,
				"|..........|", 0ah,
				"|..........|", 0ah,
				"|.........3|", 0ah,
				0c0h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0d9h, 0ah, 0h
 000002C5 DA C4 C4 C4 C4	Four BYTE 0dah, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0bfh, 0ah,
	   C4 C4 C4 C4 C4
	   C4 BF 0A 7C 34
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 7C
	   0A 7C 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 7C 0A 7C
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   7C 0A 7C 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 7C 0A
	   7C 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   34 7C 0A C0 C4
	   C4 C4 C4 C4 C4
	   C4 C4 C4 C4 D9
	   0A 00
				"|4.........|", 0ah,
				"|..........|", 0ah,
				"|..........|", 0ah,
				"|..........|", 0ah,
				"|.........4|", 0ah,
				0c0h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0d9h, 0ah, 0h
 00000321 DA C4 C4 C4 C4	Five BYTE 0dah, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0bfh, 0ah,
	   C4 C4 C4 C4 C4
	   C4 BF 0A 7C 35
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 7C
	   0A 7C 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 7C 0A 7C
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   7C 0A 7C 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 7C 0A
	   7C 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   35 7C 0A C0 C4
	   C4 C4 C4 C4 C4
	   C4 C4 C4 C4 D9
	   0A 00
				"|5.........|", 0ah,
				"|..........|", 0ah,
				"|..........|", 0ah,
				"|..........|", 0ah,
				"|.........5|", 0ah,
				0c0h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0d9h, 0ah, 0h
 0000037D DA C4 C4 C4 C4	Six  BYTE 0dah, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0bfh, 0ah,
	   C4 C4 C4 C4 C4
	   C4 BF 0A 7C 36
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 7C
	   0A 7C 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 7C 0A 7C
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   7C 0A 7C 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 7C 0A
	   7C 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   36 7C 0A C0 C4
	   C4 C4 C4 C4 C4
	   C4 C4 C4 C4 D9
	   0A 00
				"|6.........|", 0ah,
				"|..........|", 0ah,
				"|..........|", 0ah,
				"|..........|", 0ah,
				"|.........6|", 0ah,
				0c0h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0d9h, 0ah, 0h
 000003D9 DA C4 C4 C4 C4	Seven BYTE 0dah, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0bfh, 0ah,
	   C4 C4 C4 C4 C4
	   C4 BF 0A 7C 37
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 7C
	   0A 7C 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 7C 0A 7C
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   7C 0A 7C 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 7C 0A
	   7C 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   37 7C 0A C0 C4
	   C4 C4 C4 C4 C4
	   C4 C4 C4 C4 D9
	   0A 00
				"|7.........|", 0ah,
				"|..........|", 0ah,
				"|..........|", 0ah,
				"|..........|", 0ah,
				"|.........7|", 0ah,
				0c0h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0d9h, 0ah, 0h
 00000435 DA C4 C4 C4 C4	Eight BYTE 0dah, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0bfh, 0ah,
	   C4 C4 C4 C4 C4
	   C4 BF 0A 7C 38
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 7C
	   0A 7C 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 7C 0A 7C
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   7C 0A 7C 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 7C 0A
	   7C 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   38 7C 0A C0 C4
	   C4 C4 C4 C4 C4
	   C4 C4 C4 C4 D9
	   0A 00
				"|8.........|", 0ah,
				"|..........|", 0ah,
				"|..........|", 0ah,
				"|..........|", 0ah,
				"|.........8|", 0ah,
				0c0h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0d9h, 0ah, 0h
 00000491 DA C4 C4 C4 C4	Nine BYTE 0dah, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0bfh, 0ah,
	   C4 C4 C4 C4 C4
	   C4 BF 0A 7C 39
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 7C
	   0A 7C 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 7C 0A 7C
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   7C 0A 7C 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 7C 0A
	   7C 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   39 7C 0A C0 C4
	   C4 C4 C4 C4 C4
	   C4 C4 C4 C4 D9
	   0A 00
				"|9.........|", 0ah,
				"|..........|", 0ah,
				"|..........|", 0ah,
				"|..........|", 0ah,
				"|.........9|", 0ah,
				0c0h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0d9h, 0ah, 0h
 000004ED DA C4 C4 C4 C4	Ten BYTE 0dah, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0bfh, 0ah,
	   C4 C4 C4 C4 C4
	   C4 BF 0A 7C 31
	   30 2E 2E 2E 2E
	   2E 2E 2E 2E 7C
	   0A 7C 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 7C 0A 7C
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   7C 0A 7C 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 7C 0A
	   7C 2E 2E 2E 2E
	   2E 2E 2E 2E 31
	   30 7C 0A C0 C4
	   C4 C4 C4 C4 C4
	   C4 C4 C4 C4 D9
	   0A 00
				"|10........|", 0ah,
				"|..........|", 0ah,
				"|..........|", 0ah,
				"|..........|", 0ah,
				"|........10|", 0ah,
				0c0h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0d9h, 0ah, 0h
 00000549 DA C4 C4 C4 C4	Jack BYTE 0dah, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0bfh, 0ah,
	   C4 C4 C4 C4 C4
	   C4 BF 0A 7C 4A
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 7C
	   0A 7C 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 7C 0A 7C
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   7C 0A 7C 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 7C 0A
	   7C 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   4A 7C 0A C0 C4
	   C4 C4 C4 C4 C4
	   C4 C4 C4 C4 D9
	   0A 00
				"|J.........|", 0ah,
				"|..........|", 0ah,
				"|..........|", 0ah,
				"|..........|", 0ah,
				"|.........J|", 0ah,
				0c0h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0d9h, 0ah, 0h
 000005A5 DA C4 C4 C4 C4	Queen BYTE 0dah, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0bfh, 0ah,
	   C4 C4 C4 C4 C4
	   C4 BF 0A 7C 51
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 7C
	   0A 7C 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 7C 0A 7C
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   7C 0A 7C 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 7C 0A
	   7C 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   51 7C 0A C0 C4
	   C4 C4 C4 C4 C4
	   C4 C4 C4 C4 D9
	   0A 00
				"|Q.........|", 0ah,
				"|..........|", 0ah,
				"|..........|", 0ah,
				"|..........|", 0ah,
				"|.........Q|", 0ah,
				0c0h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0d9h, 0ah, 0h
 00000601 DA C4 C4 C4 C4	King BYTE 0dah, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0bfh, 0ah,
	   C4 C4 C4 C4 C4
	   C4 BF 0A 7C 4B
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 7C
	   0A 7C 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 7C 0A 7C
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   7C 0A 7C 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 7C 0A
	   7C 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   4B 7C 0A C0 C4
	   C4 C4 C4 C4 C4
	   C4 C4 C4 C4 D9
	   0A 00
				"|K.........|", 0ah,
				"|..........|", 0ah,
				"|..........|", 0ah,
				"|..........|", 0ah,
				"|.........K|", 0ah,
				0c0h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0c4h, 0d9h, 0ah, 0h


 00000000			.code
 00000000			displayPlayerHand proc
 00000000  BA 0000001D R		mov edx, OFFSET playerHandIndicator
 00000005  E8 00000000 E		call WriteString ;Title hand
 0000000A  A1 0000000F R		mov eax, sumOfPlayerHand
 0000000F  E8 00000000 E		call WriteInt
 00000014  E8 00000000 E		call CrLf
 00000019  B9 0000000E			mov ecx, LENGTHOF playerHand ;set loop number for number of cards in hand
 0000001E  49				dec ecx ;decrease ecx bacause array starts with 0 not 1
 0000001F				L1: ;loop through all cards
 0000001F  8A 81 00000000 R			mov al, [playerHand + ecx] ;move current card value to al for comparison

						;compare al to all possible values and jump to corrasponding section
 00000025  3C 00				cmp al, 0 ;compare if memory location doesn't hold a card
 00000027  74 60				je emptyCard
 00000029  3C 02				cmp al, 2
 0000002B  74 68				je cardTwo
 0000002D  3C 03				cmp al, 3
 0000002F  74 7E				je cardThree
 00000031  3C 04				cmp al, 4
 00000033  0F 84 00000090			je cardFour
 00000039  3C 05				cmp al, 5
 0000003B  0F 84 000000A2			je cardFive
 00000041  3C 06				cmp al, 6
 00000043  0F 84 000000B4			je cardSix
 00000049  3C 07				cmp al, 7
 0000004B  0F 84 000000C6			je cardSeven
 00000051  3C 08				cmp al, 8
 00000053  0F 84 000000D8			je cardEight
 00000059  3C 09				cmp al, 9
 0000005B  0F 84 000000EA			je cardNine
 00000061  3C 0A				cmp al, 10
 00000063  0F 84 000000F8			je cardTen
 00000069  3C 0B				cmp al, 11
 0000006B  0F 84 00000106			je cardJack
 00000071  3C 0C				cmp al, 12
 00000073  0F 84 00000114			je cardQueen
 00000079  3C 0D				cmp al, 13
 0000007B  0F 84 00000122			je cardKing
 00000081  3C 0E				cmp al, 14
 00000083  0F 84 00000130			je cardAce

						;move offset of correct value to edx.
						;Call Irvine WriteString
						;decrament edx and if edx greater than or equal zero jump to top for next card
						;if edx is less than zero jump to Return
 00000089					emptyCard:
 00000089  49						dec ecx
 0000008A  83 F9 00					cmp ecx, 0
 0000008D  7D 90					jge L1
 0000008F  0F 8E 0000013A				jng Return
 00000095					cardTwo:
 00000095  BA 0000020D R				mov edx, OFFSET Two
 0000009A  E8 00000000 E				call WriteString
 0000009F  49						dec ecx
 000000A0  83 F9 00					cmp ecx, 0
 000000A3  0F 8D FFFFFF76				jge L1
 000000A9  0F 8E 00000120				jng Return
 000000AF					cardThree:
 000000AF  BA 00000269 R				mov edx, OFFSET Three
 000000B4  E8 00000000 E				call WriteString
 000000B9  49						dec ecx
 000000BA  83 F9 00					cmp ecx, 0
 000000BD  0F 8D FFFFFF5C				jge L1
 000000C3  0F 8E 00000106				jng Return
 000000C9					cardFour:
 000000C9  BA 000002C5 R				mov edx, OFFSET Four
 000000CE  E8 00000000 E				call WriteString
 000000D3  49						dec ecx 
 000000D4  83 F9 00					cmp ecx, 0
 000000D7  0F 8D FFFFFF42				jge L1
 000000DD  0F 8E 000000EC				jng Return
 000000E3					cardFive:
 000000E3  BA 00000321 R				mov edx, OFFSET Five
 000000E8  E8 00000000 E				call WriteString
 000000ED  49						dec ecx 
 000000EE  83 F9 00					cmp ecx, 0
 000000F1  0F 8D FFFFFF28				jge L1
 000000F7  0F 8E 000000D2				jng Return
 000000FD					cardSix:
 000000FD  BA 0000037D R				mov edx, OFFSET Six
 00000102  E8 00000000 E				call WriteString
 00000107  49						dec ecx 
 00000108  83 F9 00					cmp ecx, 0
 0000010B  0F 8D FFFFFF0E				jge L1
 00000111  0F 8E 000000B8				jng Return
 00000117					cardSeven:
 00000117  BA 000003D9 R				mov edx, OFFSET Seven
 0000011C  E8 00000000 E				call WriteString
 00000121  49						dec ecx 
 00000122  83 F9 00					cmp ecx, 0
 00000125  0F 8D FFFFFEF4				jge L1
 0000012B  0F 8E 0000009E				jng Return
 00000131					cardEight:
 00000131  BA 00000435 R				mov edx, OFFSET Eight
 00000136  E8 00000000 E				call WriteString
 0000013B  49						dec ecx 
 0000013C  83 F9 00					cmp ecx, 0
 0000013F  0F 8D FFFFFEDA				jge L1
 00000145  0F 8E 00000084				jng Return
 0000014B					cardNine:
 0000014B  BA 00000491 R				mov edx, OFFSET Nine
 00000150  E8 00000000 E				call WriteString
 00000155  49						dec ecx 
 00000156  83 F9 00					cmp ecx, 0
 00000159  0F 8D FFFFFEC0				jge L1
 0000015F  7E 6E					jng Return
 00000161					cardTen:
 00000161  BA 000004ED R				mov edx, OFFSET Ten
 00000166  E8 00000000 E				call WriteString
 0000016B  49						dec ecx 
 0000016C  83 F9 00					cmp ecx, 0
 0000016F  0F 8D FFFFFEAA				jge L1
 00000175  7E 58					jng Return
 00000177					cardJack:
 00000177  BA 00000549 R				mov edx, OFFSET Jack
 0000017C  E8 00000000 E				call WriteString
 00000181  49						dec ecx 
 00000182  83 F9 00					cmp ecx, 0
 00000185  0F 8D FFFFFE94				jge L1
 0000018B  7E 42					jng Return
 0000018D					cardQueen:
 0000018D  BA 000005A5 R				mov edx, OFFSET Queen
 00000192  E8 00000000 E				call WriteString
 00000197  49						dec ecx 
 00000198  83 F9 00					cmp ecx, 0
 0000019B  0F 8D FFFFFE7E				jge L1
 000001A1  7E 2C					jng Return
 000001A3					cardKing:
 000001A3  BA 00000601 R				mov edx, OFFSET King
 000001A8  E8 00000000 E				call WriteString
 000001AD  49						dec ecx 
 000001AE  83 F9 00					cmp ecx, 0
 000001B1  0F 8D FFFFFE68				jge L1
 000001B7  7E 16					jng Return
 000001B9					cardAce:
 000001B9  BA 000001B1 R				mov edx, OFFSET Ace
 000001BE  E8 00000000 E				call WriteString
 000001C3  49						dec ecx 
 000001C4  83 F9 00					cmp ecx, 0
 000001C7  0F 8D FFFFFE52				jge L1
 000001CD  7E 00					jng Return
 000001CF				Return:	;end of drawing all cards in hand
 000001CF  E8 00000000 E			call CRLF
 000001D4  C3					ret
 000001D5			displayPlayerHand endp

 000001D5			displayDealerHand proc
 000001D5  BA 00000054 R		mov edx, OFFSET dealerHandIndicator
 000001DA  E8 00000000 E		call WriteString ;Title hand
 000001DF  B9 0000000F			mov ecx, LENGTHOF dealerHand ;set loop number for number of cards in hand
 000001E4  49				dec ecx ;decrease ecx bacause array starts with 0 not 1
 000001E5				L1: ;loop through all cards
 000001E5  8A 81 00000037 R			mov al, [dealerHand + ecx] ;move current card value to al for comparison

						;compare al to all possible values and jump to corrasponding section
 000001EB  3C 00				cmp al, 0 ;compare if memory location doesn't hold a card
 000001ED  74 6C				je emptyCard
 000001EF  3C 01		cmp al, 1
 000001F1  74 74				je backCard
 000001F3  3C 02				cmp al, 2
 000001F5  0F 84 00000086			je cardTwo
 000001FB  3C 03				cmp al, 3
 000001FD  0F 84 00000098			je cardThree
 00000203  3C 04				cmp al, 4
 00000205  0F 84 000000AA			je cardFour
 0000020B  3C 05				cmp al, 5
 0000020D  0F 84 000000BC			je cardFive
 00000213  3C 06				cmp al, 6
 00000215  0F 84 000000CE			je cardSix
 0000021B  3C 07				cmp al, 7
 0000021D  0F 84 000000E0			je cardSeven
 00000223  3C 08				cmp al, 8
 00000225  0F 84 000000F2			je cardEight
 0000022B  3C 09				cmp al, 9
 0000022D  0F 84 00000104			je cardNine
 00000233  3C 0A				cmp al, 10
 00000235  0F 84 00000112			je cardTen
 0000023B  3C 0B				cmp al, 11
 0000023D  0F 84 00000120			je cardJack
 00000243  3C 0C				cmp al, 12
 00000245  0F 84 0000012E			je cardQueen
 0000024B  3C 0D				cmp al, 13
 0000024D  0F 84 0000013C			je cardKing
 00000253  3C 0E				cmp al, 14
 00000255  0F 84 0000014A			je cardAce

						;move offset of correct value to edx.
						;Call Irvine WriteString
						;decrament edx and if edx greater than or equal zero jump to top for next card
						;if edx is less than zero jump to Return
 0000025B					emptyCard:
 0000025B  49						dec ecx
 0000025C  83 F9 01					cmp ecx, 1
 0000025F  7D 84					jge L1
 00000261  0F 8E 00000154				jng Return
 00000267					backCard:
 00000267  BA 00000155 R				mov edx, OFFSET Back
 0000026C  E8 00000000 E				call WriteString
 00000271  49						dec ecx
 00000272  83 F9 01					cmp ecx, 1
 00000275  0F 8D FFFFFF6A				jge L1
 0000027B  0F 8E 0000013A				jng Return
 00000281					cardTwo:
 00000281  BA 0000020D R				mov edx, OFFSET Two
 00000286  E8 00000000 E				call WriteString
 0000028B  49						dec ecx
 0000028C  83 F9 01					cmp ecx, 1
 0000028F  0F 8D FFFFFF50				jge L1
 00000295  0F 8E 00000120				jng Return
 0000029B					cardThree:
 0000029B  BA 00000269 R				mov edx, OFFSET Three
 000002A0  E8 00000000 E				call WriteString
 000002A5  49						dec ecx
 000002A6  83 F9 01					cmp ecx, 1
 000002A9  0F 8D FFFFFF36				jge L1
 000002AF  0F 8E 00000106				jng Return
 000002B5					cardFour:
 000002B5  BA 000002C5 R				mov edx, OFFSET Four
 000002BA  E8 00000000 E				call WriteString
 000002BF  49						dec ecx 
 000002C0  83 F9 01					cmp ecx, 1
 000002C3  0F 8D FFFFFF1C				jge L1
 000002C9  0F 8E 000000EC				jng Return
 000002CF					cardFive:
 000002CF  BA 00000321 R				mov edx, OFFSET Five
 000002D4  E8 00000000 E				call WriteString
 000002D9  49						dec ecx 
 000002DA  83 F9 01					cmp ecx, 1
 000002DD  0F 8D FFFFFF02				jge L1
 000002E3  0F 8E 000000D2				jng Return
 000002E9					cardSix:
 000002E9  BA 0000037D R				mov edx, OFFSET Six
 000002EE  E8 00000000 E				call WriteString
 000002F3  49						dec ecx 
 000002F4  83 F9 01					cmp ecx, 1
 000002F7  0F 8D FFFFFEE8				jge L1
 000002FD  0F 8E 000000B8				jng Return
 00000303					cardSeven:
 00000303  BA 000003D9 R				mov edx, OFFSET Seven
 00000308  E8 00000000 E				call WriteString
 0000030D  49						dec ecx 
 0000030E  83 F9 01					cmp ecx, 1
 00000311  0F 8D FFFFFECE				jge L1
 00000317  0F 8E 0000009E				jng Return
 0000031D					cardEight:
 0000031D  BA 00000435 R				mov edx, OFFSET Eight
 00000322  E8 00000000 E				call WriteString
 00000327  49						dec ecx 
 00000328  83 F9 01					cmp ecx, 1
 0000032B  0F 8D FFFFFEB4				jge L1
 00000331  0F 8E 00000084				jng Return
 00000337					cardNine:
 00000337  BA 00000491 R				mov edx, OFFSET Nine
 0000033C  E8 00000000 E				call WriteString
 00000341  49						dec ecx 
 00000342  83 F9 01					cmp ecx, 1
 00000345  0F 8D FFFFFE9A				jge L1
 0000034B  7E 6E					jng Return
 0000034D					cardTen:
 0000034D  BA 000004ED R				mov edx, OFFSET Ten
 00000352  E8 00000000 E				call WriteString
 00000357  49						dec ecx 
 00000358  83 F9 01					cmp ecx, 1
 0000035B  0F 8D FFFFFE84				jge L1
 00000361  7E 58					jng Return
 00000363					cardJack:
 00000363  BA 00000549 R				mov edx, OFFSET Jack
 00000368  E8 00000000 E				call WriteString
 0000036D  49						dec ecx 
 0000036E  83 F9 01					cmp ecx, 1
 00000371  0F 8D FFFFFE6E				jge L1
 00000377  7E 42					jng Return
 00000379					cardQueen:
 00000379  BA 000005A5 R				mov edx, OFFSET Queen
 0000037E  E8 00000000 E				call WriteString
 00000383  49						dec ecx 
 00000384  83 F9 01					cmp ecx, 1
 00000387  0F 8D FFFFFE58				jge L1
 0000038D  7E 2C					jng Return
 0000038F					cardKing:
 0000038F  BA 00000601 R				mov edx, OFFSET King
 00000394  E8 00000000 E				call WriteString
 00000399  49						dec ecx 
 0000039A  83 F9 01					cmp ecx, 1
 0000039D  0F 8D FFFFFE42				jge L1
 000003A3  7E 16					jng Return
 000003A5					cardAce:
 000003A5  BA 000001B1 R				mov edx, OFFSET Ace
 000003AA  E8 00000000 E				call WriteString
 000003AF  49						dec ecx 
 000003B0  83 F9 01					cmp ecx, 1
 000003B3  0F 8D FFFFFE2C				jge L1
 000003B9  7E 00					jng Return
 000003BB				Return:	;end of drawing all cards in hand
 000003BB  E8 00000000 E			call CRLF
 000003C0  C3					ret
 000003C1			displayDealerHand endp

 000003C1			addCardPlayer proc
 000003C1  B8 0000000D			mov eax, 13 ;get range for RandomRange 
 000003C6  E8 00000000 E		call RandomRange
 000003CB  83 C0 02			add eax, 2 ;get range 2-14
 000003CE  0F B6 1D			movzx ebx, cardsInPlayerHand ;counter for cards in hand
	   0000000E R
 000003D5  88 83 00000000 R		mov [playerHand + ebx], al ;create new value in next empty space in playerHand
 000003DB  43				inc ebx
 000003DC  88 1D 0000000E R		mov cardsInPlayerHand, bl ;update card counter

 000003E2  83 F8 0E			cmp eax, 14 ;compare to ace card
 000003E5  74 25			je aceDealt

 000003E7  83 F8 0A			cmp eax, 10 ;compare to determine if facecard
 000003EA  7F 0F			jg faceCard

					;numbered cards
 000003EC  8B 1D 0000000F R		mov ebx, sumOfPlayerHand ;copy sum to ebx
 000003F2  03 C3			add eax, ebx ;add new card to sum
 000003F4  A3 0000000F R		mov sumOfPlayerHand, eax ;move new sum to memory
 000003F9  EB 43			jmp checkBust

 000003FB				faceCard:
 000003FB  8B 1D 0000000F R			mov ebx, sumOfPlayerHand
 00000401  83 C3 0A				add ebx, 10
 00000404  89 1D 0000000F R			mov sumOfPlayerHand, ebx
 0000040A  EB 32				jmp checkBust

 0000040C				aceDealt:
 0000040C  83 3D 0000000F R			cmp sumOfPlayerHand, 10 ;determine if high ace or low ace needed
	   0A
 00000413  7F 18				jg lowAce
 00000415  8B 1D 0000000F R			mov ebx, sumOfPlayerHand
 0000041B  83 C3 0B				add ebx, 11 ;high ace value
 0000041E  89 1D 0000000F R			mov sumOfPlayerHand, ebx
 00000424  C6 05 00000014 R			mov playerHighAce, 1 ;store that hend has a high ace
	   01
 0000042B  EB 11				jmp checkBust

 0000042D					lowAce:
 0000042D  8B 1D 0000000F R				mov ebx, sumOfPlayerHand
 00000433  83 C3 01					add ebx, 1
 00000436  89 1D 0000000F R				mov sumOfPlayerHand, ebx
 0000043C  EB 00					jmp checkBust

 0000043E				checkBust:
						;check if hand sums to 21
 0000043E  A1 00000019 R			mov eax, player21 
 00000443  BB 00000001				mov ebx, 1
 00000448  83 3D 0000000F R			cmp sumOfPlayerHand, 21 ;find if hand is equal to 21
	   15
 0000044F  0F 44 C3				cmove eax, ebx 
 00000452  A3 00000019 R			mov player21, eax ;sets player21 to 1 of sum = 21

						;check if hand is greater than 21
 00000457  A1 00000015 R			mov eax, playerBust
 0000045C  BB 00000001				mov ebx, 1
 00000461  83 3D 0000000F R			cmp sumOfPlayerHand, 21 ;find if hand is greater than 21
	   15
 00000468  0F 47 C3				cmova eax, ebx 
 0000046B  83 F8 01				cmp eax, 1
 0000046E  75 2A				jne continue ;hand is less than 21
 00000470  80 3D 00000014 R			cmp playerHighAce, 1 ;hand has a high ace in it
	   01
 00000477  75 16				jne bust ;over 21 and no high ace
 00000479  C6 05 00000014 R			mov playerHighAce, 0 ;reset high ace counter
	   00
 00000480  A1 0000000F R			mov eax, sumOfPlayerHand
 00000485  83 E8 0A				sub eax, 10 ;make low ace
 00000488  A3 0000000F R			mov sumOfPlayerHand, eax
 0000048D  EB AF				jmp checkBust ;check if low ace sum is still a bust

 0000048F					bust:
 0000048F  C7 05 00000015 R				mov playerBust, 1 ;set bust counter
	   00000001
 00000499  C3						ret
 0000049A					continue:
 0000049A  C3						ret

 0000049B			addCardPlayer endp

 0000049B			addCardDealer proc
 0000049B  B8 00000000			mov eax, 0
 000004A0  BB 00000000			mov ebx, 0
 000004A5  B8 0000000C			mov eax, 12 ;get range for RandomRange 
 000004AA  E8 00000000 E		call RandomRange
 000004AF  83 C0 02			add eax, 2 ;get range 2-14
 000004B2  0F B6 1D			movzx ebx, cardsInDealerHand ;counter for cards in hand
	   00000046 R
 000004B9  88 83 00000037 R		mov [dealerHand + ebx], al ;create new value in next empty space in dealer hand
 000004BF  43				inc ebx
 000004C0  88 1D 00000046 R		mov cardsInDealerHand, bl ;update card counter

 000004C6  83 F8 0E			cmp eax, 14 ;compare to ace card
 000004C9  74 25			je aceDealt

 000004CB  83 F8 0A			cmp eax, 10 ;compare to determine if facecard
 000004CE  7F 0F			jg faceCard

					;numbered cards
 000004D0  8B 1D 00000047 R		mov ebx, sumOfDealerHand ;copy sum to ebx
 000004D6  03 C3			add eax, ebx ;add new card to sum
 000004D8  A3 00000047 R		mov sumOfDealerHand, eax ;move new sum to memory
 000004DD  EB 43			jmp checkBust

 000004DF				faceCard:
 000004DF  8B 1D 00000047 R			mov ebx, sumOfDealerHand
 000004E5  83 C3 0A				add ebx, 10
 000004E8  89 1D 00000047 R			mov sumOfDealerHand, ebx
 000004EE  EB 32				jmp checkBust

 000004F0				aceDealt:
 000004F0  83 3D 00000047 R			cmp sumOfDealerHand, 10 ;determine if high ace or low ace needed
	   0A
 000004F7  7F 18				jg lowAce
 000004F9  8B 1D 00000047 R			mov ebx, sumOfDealerHand
 000004FF  83 C3 0B				add ebx, 11 ;high ace value
 00000502  89 1D 00000047 R			mov sumOfDealerHand, ebx
 00000508  C6 05 0000004B R			mov dealerHighAce, 1
	   01
 0000050F  EB 11				jmp checkBust

 00000511					lowAce:
 00000511  8B 1D 00000047 R				mov ebx, sumOfDealerHand
 00000517  83 C3 01					add ebx, 1
 0000051A  89 1D 00000047 R				mov sumOfDealerHand, ebx
 00000520  EB 00					jmp checkBust

 00000522					checkBust:
						;check if hand sums to 21
 00000522  A1 00000050 R			mov eax, dealer21 
 00000527  BB 00000001				mov ebx, 1
 0000052C  83 3D 00000047 R			cmp sumOfDealerHand, 21 ;find if hand is equal to 21
	   15
 00000533  0F 44 C3				cmove eax, ebx
 00000536  A3 00000050 R			mov dealer21, eax ;set 21 counter if hand = 21

						;check if hand is greater than 21
 0000053B  A1 0000004C R			mov eax, dealerBust
 00000540  BB 00000001				mov ebx, 1
 00000545  83 3D 00000047 R			cmp sumOfDealerHand, 21 ;compare sum of hand and 21
	   15
 0000054C  0F 47 C3				cmova eax, ebx ;set eax to one if hand > 21
 0000054F  83 F8 01				cmp eax, 1  
 00000552  75 2A				jne continue ;contuine if not > 21
 00000554  80 3D 0000004B R			cmp dealerHighAce, 1 ;look for ace in hand
	   01
 0000055B  75 16				jne bust ;hand > 21 and no high ace
 0000055D  C6 05 0000004B R			mov dealerHighAce, 0 ;reset high ace counter
	   00
 00000564  A1 00000047 R			mov eax, sumOfDealerHand 
 00000569  83 E8 0A				sub eax, 10 ;make high ace, low ace
 0000056C  A3 00000047 R			mov sumOfDealerHand, eax
 00000571  EB AF				jmp checkBust; check new value for bust

 00000573					bust:
 00000573  C7 05 0000004C R				mov dealerBust, 1
	   00000001
 0000057D  C3						ret
 0000057E					continue:
 0000057E  C3						ret
						
 0000057F  C3					ret
 00000580			addCardDealer endp

 00000580			dealing proc
 00000580  E8 FFFFFF16			call addCardDealer ;deal one card to dealer
 00000585  E8 FFFFFF11			call addCardDealer ;deal one card to dealer
 0000058A  E8 FFFFFC46			call displayDealerHand ;display dealer hand
 0000058F  E8 FFFFFE2D			call addCardPlayer ;deal one card to player
 00000594  E8 FFFFFE28			call addCardPlayer ;deal one card to player
 00000599  E8 FFFFFA62			call displayPlayerHand ;show player their hand
 0000059E  C3				ret
 0000059F			dealing endp

 0000059F			getUserInput proc 
 0000059F  BA 000000B9 R		mov edx, OFFSET whatToDo ;display instructions for player
 000005A4  E8 00000000 E		call WriteString
 000005A9  BA 0000010A R		mov edx, OFFSET input ;load buffer parameter
 000005AE  B9 00000005			mov ecx, SIZEOF input ;load max character parameter
 000005B3  E8 00000000 E		call ReadString ; call Irvine procedure user input stored in 'input'

 000005B8  83 F8 03			cmp eax, 3 ;eax contains length of input string compare with 3(hit)
 000005BB  74 08			je hit

					;stay
 000005BD  C6 05 00000013 R		mov stayValue, 1
	   01
 000005C4  C3				ret

 000005C5				hit:;hit
 000005C5  E8 FFFFFDF7				call addCardPlayer ;player hits so give them card and display hand
 000005CA  E8 FFFFFA31				call displayPlayerHand
 000005CF  C3					ret
					
 000005D0			getUserInput endp

 000005D0			endDisplay proc
 000005D0  A0 00000037 R		mov al, dealerHand
 000005D5  A2 00000045 R		mov [dealerHand + 14], al
 000005DA  E8 FFFFFBF6			call displayDealerHand
 000005DF  BA 0000006F R		mov edx, OFFSET sumText
 000005E4  E8 00000000 E		call WriteString
 000005E9  A1 00000047 R		mov eax, sumOfDealerHand
 000005EE  E8 00000000 E		call WriteInt
 000005F3  E8 00000000 E		call CrLf
 000005F8  E8 FFFFFA03			call displayPlayerHand
 000005FD  C3				ret
 000005FE			endDisplay endp

 000005FE			resetValues proc
					;reset values of player hand to 0
 000005FE  B9 0000000E			mov ecx, 14 ;number of values in player hand
 00000603				L1: ;resets all values of playerHand to 0
 00000603  C6 81 00000000 R			mov [playerHand + ecx], 0
	   00
 0000060A  E2 F7			loop L1
 0000060C  C6 05 00000000 R		mov playerHand, 0
	   00
 00000613  C7 05 0000000F R		mov sumOfPlayerHand, 0
	   00000000
 0000061D  C6 05 0000000E R		mov cardsInPlayerHand, 0
	   00
 00000624  C6 05 00000013 R		mov stayValue, 0
	   00
 0000062B  C7 05 00000015 R		mov playerBust, 0
	   00000000
 00000635  C7 05 00000019 R		mov player21, 0
	   00000000
 0000063F  C6 05 00000014 R		mov playerHighAce, 0
	   00

					;reset all values of dealer hand
 00000646  C6 05 00000045 R		mov [dealerHand + 14], 1
	   01
 0000064D  B9 0000000D			mov ecx, 13 ;skip up side down card
 00000652				L2:
 00000652  C6 81 00000037 R			mov [dealerHand+ecx], 0
	   00
 00000659  E2 F7			loop L2
 0000065B  C6 05 00000037 R		mov dealerHand, 0
	   00
 00000662  C7 05 00000047 R		mov sumOfDealerHand, 0
	   00000000
 0000066C  C6 05 00000046 R		mov cardsInDealerHand, 0
	   00
 00000673  C7 05 0000004C R		mov dealerBust, 0
	   00000000
 0000067D  C7 05 00000050 R		mov dealer21, 0
	   00000000
 00000687  C6 05 0000004B R		mov dealerHighAce, 0
	   00

 0000068E  C3				ret
 0000068F			resetValues endp

 0000068F			main proc
 0000068F				begin: ;loop for new hand
 0000068F  E8 FFFFFF6A			call resetValues ;resets all game values

 00000694  E8 00000000 E		call Randomize ;seed RNG for program
 00000699  E8 FFFFFEE2			call dealing ;deal and display 2 cards to player and dealer "dummy card" for dealer displayed upside down
					
 0000069E				playerRound: ;loop while player has control
 0000069E  83 3D 00000019 R			cmp player21, 1
	   01
 000006A5  74 4F				je Win
 000006A7  83 3D 00000050 R			cmp dealer21, 1
	   01
 000006AE  74 57				je Lose
 000006B0  E8 FFFFFEEA				call getUserInput
 000006B5  80 3D 00000013 R			cmp stayValue, 1
	   01
 000006BC  74 0B				je dealerRound
 000006BE  83 3D 00000015 R			cmp playerBust, 1
	   01
 000006C5  74 40				je Lose
 000006C7  EB D5			jmp playerRound


 000006C9				dealerRound: ;loop while dealer has control
 000006C9  83 3D 00000050 R			cmp dealer21, 1
	   01
 000006D0  74 35				je Lose
 000006D2  83 3D 0000004C R			cmp dealerBust, 1
	   01
 000006D9  74 1B				je Win
 000006DB  A1 00000047 R			mov eax, sumOfDealerHand
 000006E0  3B 05 0000000F R			cmp eax, sumOfPlayerHand
 000006E6  74 30				je Tie ;dealerHand = playerHand
 000006E8  7F 1D				jg Lose ;dealerHand > playerHand
						;dealerHand < playerHand
 000006EA  E8 FFFFFDAC				call addCardDealer
 000006EF  E8 FFFFFAE1				call displayDealerHand
 000006F4  EB D3				jmp dealerRound
						

 000006F6				Win:
 000006F6  BA 00000074 R			mov edx, OFFSET winMessage
 000006FB  E8 00000000 E			call WriteString
 00000700  E8 FFFFFECB				call endDisplay
 00000705  EB 20				jmp endL
 00000707				Lose:
 00000707  BA 00000080 R			mov edx, OFFSET loseMessage
 0000070C  E8 00000000 E			call WriteString
 00000711  E8 FFFFFEBA				call endDisplay
 00000716  EB 0F				jmp endL
 00000718				Tie:
 00000718  BA 000000A6 R			mov edx, OFFSET tieMessage
 0000071D  E8 00000000 E			call WriteString
 00000722  E8 FFFFFEA9				call endDisplay
 00000727				endL:
 00000727  BA 0000010F R			mov edx, OFFSET newGame ;display instructions for player
 0000072C  E8 00000000 E			call WriteString
 00000731  BA 0000010A R			mov edx, OFFSET input ;load buffer parameter
 00000736  B9 00000005				mov ecx, SIZEOF input ;load max character parameter
 0000073B  E8 00000000 E			call ReadString ; call Irvine procedure user input stored in 'input'
 00000740  83 F8 03				cmp eax, 3
 00000743  0F 84 FFFFFF46			je begin
					exit
 00000749  6A 00	   *	    push   +000000000h
 0000074B  E8 00000000 E   *	    call   ExitProcess
 00000750			main endp
				end main
Microsoft (R) Macro Assembler Version 14.10.25019.0	    12/10/17 14:38:04
Main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000065D Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000750 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
addCardDealer  . . . . . . . . .	P Near	 0000049B _TEXT	Length= 000000E5 Public STDCALL
  faceCard . . . . . . . . . . .	L Near	 000004DF _TEXT	
  aceDealt . . . . . . . . . . .	L Near	 000004F0 _TEXT	
  lowAce . . . . . . . . . . . .	L Near	 00000511 _TEXT	
  checkBust  . . . . . . . . . .	L Near	 00000522 _TEXT	
  bust . . . . . . . . . . . . .	L Near	 00000573 _TEXT	
  continue . . . . . . . . . . .	L Near	 0000057E _TEXT	
addCardPlayer  . . . . . . . . .	P Near	 000003C1 _TEXT	Length= 000000DA Public STDCALL
  faceCard . . . . . . . . . . .	L Near	 000003FB _TEXT	
  aceDealt . . . . . . . . . . .	L Near	 0000040C _TEXT	
  lowAce . . . . . . . . . . . .	L Near	 0000042D _TEXT	
  checkBust  . . . . . . . . . .	L Near	 0000043E _TEXT	
  bust . . . . . . . . . . . . .	L Near	 0000048F _TEXT	
  continue . . . . . . . . . . .	L Near	 0000049A _TEXT	
dealing  . . . . . . . . . . . .	P Near	 00000580 _TEXT	Length= 0000001F Public STDCALL
displayDealerHand  . . . . . . .	P Near	 000001D5 _TEXT	Length= 000001EC Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000001E5 _TEXT	
  emptyCard  . . . . . . . . . .	L Near	 0000025B _TEXT	
  backCard . . . . . . . . . . .	L Near	 00000267 _TEXT	
  cardTwo  . . . . . . . . . . .	L Near	 00000281 _TEXT	
  cardThree  . . . . . . . . . .	L Near	 0000029B _TEXT	
  cardFour . . . . . . . . . . .	L Near	 000002B5 _TEXT	
  cardFive . . . . . . . . . . .	L Near	 000002CF _TEXT	
  cardSix  . . . . . . . . . . .	L Near	 000002E9 _TEXT	
  cardSeven  . . . . . . . . . .	L Near	 00000303 _TEXT	
  cardEight  . . . . . . . . . .	L Near	 0000031D _TEXT	
  cardNine . . . . . . . . . . .	L Near	 00000337 _TEXT	
  cardTen  . . . . . . . . . . .	L Near	 0000034D _TEXT	
  cardJack . . . . . . . . . . .	L Near	 00000363 _TEXT	
  cardQueen  . . . . . . . . . .	L Near	 00000379 _TEXT	
  cardKing . . . . . . . . . . .	L Near	 0000038F _TEXT	
  cardAce  . . . . . . . . . . .	L Near	 000003A5 _TEXT	
  Return . . . . . . . . . . . .	L Near	 000003BB _TEXT	
displayPlayerHand  . . . . . . .	P Near	 00000000 _TEXT	Length= 000001D5 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000001F _TEXT	
  emptyCard  . . . . . . . . . .	L Near	 00000089 _TEXT	
  cardTwo  . . . . . . . . . . .	L Near	 00000095 _TEXT	
  cardThree  . . . . . . . . . .	L Near	 000000AF _TEXT	
  cardFour . . . . . . . . . . .	L Near	 000000C9 _TEXT	
  cardFive . . . . . . . . . . .	L Near	 000000E3 _TEXT	
  cardSix  . . . . . . . . . . .	L Near	 000000FD _TEXT	
  cardSeven  . . . . . . . . . .	L Near	 00000117 _TEXT	
  cardEight  . . . . . . . . . .	L Near	 00000131 _TEXT	
  cardNine . . . . . . . . . . .	L Near	 0000014B _TEXT	
  cardTen  . . . . . . . . . . .	L Near	 00000161 _TEXT	
  cardJack . . . . . . . . . . .	L Near	 00000177 _TEXT	
  cardQueen  . . . . . . . . . .	L Near	 0000018D _TEXT	
  cardKing . . . . . . . . . . .	L Near	 000001A3 _TEXT	
  cardAce  . . . . . . . . . . .	L Near	 000001B9 _TEXT	
  Return . . . . . . . . . . . .	L Near	 000001CF _TEXT	
endDisplay . . . . . . . . . . .	P Near	 000005D0 _TEXT	Length= 0000002E Public STDCALL
getUserInput . . . . . . . . . .	P Near	 0000059F _TEXT	Length= 00000031 Public STDCALL
  hit  . . . . . . . . . . . . .	L Near	 000005C5 _TEXT	
main . . . . . . . . . . . . . .	P Near	 0000068F _TEXT	Length= 000000C1 Public STDCALL
  begin  . . . . . . . . . . . .	L Near	 0000068F _TEXT	
  playerRound  . . . . . . . . .	L Near	 0000069E _TEXT	
  dealerRound  . . . . . . . . .	L Near	 000006C9 _TEXT	
  Win  . . . . . . . . . . . . .	L Near	 000006F6 _TEXT	
  Lose . . . . . . . . . . . . .	L Near	 00000707 _TEXT	
  Tie  . . . . . . . . . . . . .	L Near	 00000718 _TEXT	
  endL . . . . . . . . . . . . .	L Near	 00000727 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
resetValues  . . . . . . . . . .	P Near	 000005FE _TEXT	Length= 00000091 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000603 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000652 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
Ace  . . . . . . . . . . . . . .	Byte	 000001B1 _DATA	
Back . . . . . . . . . . . . . .	Byte	 00000155 _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
Eight  . . . . . . . . . . . . .	Byte	 00000435 _DATA	
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
Five . . . . . . . . . . . . . .	Byte	 00000321 _DATA	
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
Four . . . . . . . . . . . . . .	Byte	 000002C5 _DATA	
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
Jack . . . . . . . . . . . . . .	Byte	 00000549 _DATA	
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
King . . . . . . . . . . . . . .	Byte	 00000601 _DATA	
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
Nine . . . . . . . . . . . . . .	Byte	 00000491 _DATA	
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
Queen  . . . . . . . . . . . . .	Byte	 000005A5 _DATA	
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
Seven  . . . . . . . . . . . . .	Byte	 000003D9 _DATA	
Six  . . . . . . . . . . . . . .	Byte	 0000037D _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
Ten  . . . . . . . . . . . . . .	Byte	 000004ED _DATA	
Three  . . . . . . . . . . . . .	Byte	 00000269 _DATA	
Two  . . . . . . . . . . . . . .	Byte	 0000020D _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cardsInDealerHand  . . . . . . .	Byte	 00000046 _DATA	
cardsInPlayerHand  . . . . . . .	Byte	 0000000E _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dealer21 . . . . . . . . . . . .	DWord	 00000050 _DATA	
dealerBust . . . . . . . . . . .	DWord	 0000004C _DATA	
dealerHandIndicator  . . . . . .	Byte	 00000054 _DATA	
dealerHand . . . . . . . . . . .	Byte	 00000037 _DATA	
dealerHighAce  . . . . . . . . .	Byte	 0000004B _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
input  . . . . . . . . . . . . .	Byte	 0000010A _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
loseMessage  . . . . . . . . . .	Byte	 00000080 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
newGame  . . . . . . . . . . . .	Byte	 0000010F _DATA	
player21 . . . . . . . . . . . .	DWord	 00000019 _DATA	
playerBust . . . . . . . . . . .	DWord	 00000015 _DATA	
playerHandIndicator  . . . . . .	Byte	 0000001D _DATA	
playerHand . . . . . . . . . . .	Byte	 00000000 _DATA	
playerHighAce  . . . . . . . . .	Byte	 00000014 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
stayValue  . . . . . . . . . . .	Byte	 00000013 _DATA	
sumOfDealerHand  . . . . . . . .	DWord	 00000047 _DATA	
sumOfPlayerHand  . . . . . . . .	DWord	 0000000F _DATA	
sumText  . . . . . . . . . . . .	Byte	 0000006F _DATA	
tieMessage . . . . . . . . . . .	Byte	 000000A6 _DATA	
whatToDo . . . . . . . . . . . .	Byte	 000000B9 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
winMessage . . . . . . . . . . .	Byte	 00000074 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
